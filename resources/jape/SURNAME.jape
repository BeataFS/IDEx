Phase:	Person
Input: Pt_Forename Lookup2 Token Sentence Date_of_Birth Block
Options: control = Appelt







Rule: Surname0  // when surname is like a first name e.g. Lewis and there is no other name after it
// and  firstname may not be on the list of names so using Token instead, Token string excludes strings that are a part of hyphonated surname  - see rule 8
Priority: 100

(
   ({Lookup2.minorType == ref_term})
   ({Token.kind == punctuation})?
   ({Lookup2.majorType == title})?
    ({Token.category == NNP, Token.orth == upperInitial})
    ({Token.category == NNP, Token.orth == upperInitial, Token.string !=~".*-$"})?  
    ({Token.category == NNP, Token.orth == upperInitial}):item
    ({Date_of_Birth})
    
   
):match
-->
:item.Pt_Surname = {rule = Surname0, surname = :item.Token.string}



Rule: Surname1  /* deals with the double-barrelled surnames */
Priority: 100

(
    {Pt_Forename}
    (({Token.orth == upperInitial, Token.category == NNP, Token.length > 2 }|{Token.orth == allCaps, Token.category == NNP, Token.string != "NHS", Token.length > 2})
    ({Token.orth == upperInitial, Token.category == NNP ,Token.length > 2}|{Token.orth == allCaps, Token.category == NNP,Token.string != "NHS", Token.length > 2 })):a
    

   
):match
-->
:match.Pt_Surname = {rule = Surname1, surname = :a@string}


  Rule: Surname2  // two names before surname or Address: 
Priority: 100

(
    {Pt_Forename}
    ({Lookup2.majorType == person_first}|{Lookup2.majorType == address})
    (({Token.orth == upperInitial, Token.category == NNP,  Token.length >2})|({Token.orth == allCaps, Token.category == NNP, Token.length >2 })
    |({Token.orth == upperInitial, Token.category == NN, Token.length >2 })):a
    ({Token.kind == punctuation})?
    ({Lookup2.minorType == date_term} | {Lookup2.minorType == health_term })
):match
-->
:match.Pt_Surname = {rule = Surname2, surname = :a@string} 

Rule: Surname3
Priority: 90

(
    {Pt_Forename}
    ({Token.orth == upperInitial}|{Token.orth == allCaps, Token.category == NNP, Token.length >2 }):a 
    ({Token.kind == punctuation})?
   ({Lookup2.minorType == date_term} | {Lookup2.minorType == health_term })

):match
-->
:match.Pt_Surname = {rule = Surname3, surname = :a@string} 



Rule: Surname4 // multiple name surnames
Priority: 90

(
    {Pt_Forename} 
    ({Token.length == 1, Token.orth == upperInitial})? 
    ({Token.orth == upperInitial})?
    (({Token.orth == upperInitial, Token.category == NNP , Token.length >2 })|({Token.orth == allCaps, Token.category == NNP,Token.length >2 })
    |({Token.orth == upperInitial, Token.category == NN,Token.length >2 })):a
   ({Token.kind == number})?
   {Date_of_Birth}
):match
-->
:match.Pt_Surname = {rule = Surname4, surname = :a@string} 


Rule: Surname5
Priority: 90

(
    {Pt_Forename}
    ({Lookup2.majorType == person_first})
    ({Lookup2.majorType == person_first})
    (({Token.orth == upperInitial, Token.category == NNP,  Token.length >2})|({Token.orth == allCaps, Token.category == NNP, Token.length >2 })
    |({Token.orth == upperInitial, Token.category == NN, Token.length >2 })):a
   
):match
-->
:match.Pt_Surname = {rule = Surname5, surname = :a@string} 


Rule: Surname6
Priority: 90

(
    {Pt_Forename}
    
    (({Token.orth == upperInitial, Token.category == NNP , Token.length >2 })|({Token.orth == allCaps, Token.category == NNP,Token.length >2 })
    |({Token.orth == upperInitial, Token.category == NN,Token.length >2 })):a  
    ({Token.kind == punctuation})?
   ({Lookup2.minorType == date_term} | {Lookup2.minorType == health_term })
):match
-->
:match.Pt_Surname = {rule = Surname6, surname = :a@string} 

Rule: Surname7  //when there is no DoB (rare) but a house number
Priority: 80

(
    {Pt_Forename} 
    ({Token.length == 1, Token.orth == upperInitial})? 
    ({Token.orth == upperInitial})?
    (({Token.orth == upperInitial, Token.category == NNP , Token.length >2 })|({Token.orth == allCaps, Token.category == NNP,Token.length >2 })
    |({Token.orth == upperInitial, Token.category == NN,Token.length >2 })):a
   ({Token.kind == number} | {Token.kind == word})
   
):match
-->
:match.Pt_Surname = {rule = Surname7, surname = :a@string} 


Rule: Surname8  // When first name is not on the list of names and surname is hyphonated

Priority: 100

( 
     ({Lookup2.minorType == ref_term})
      ({Token.kind == punctuation})?
   ({Lookup2.majorType == title})?
   ({Token.category == NNP, Token.orth == upperInitial})
    ({Token.category == NNP, Token.orth == upperInitial})?
    (({Token.category == NNP, Token.orth == upperInitial,Token.string ==~ ".*-$"})
    ({Token.category == NNP, Token.orth == upperInitial})):a
    ({Date_of_Birth})
    
   
):match
-->
:match.Pt_Surname = {rule = Surname8, surname = :a@string}


Rule: Surname9  // When first name is not on the list of names and surname is hyphonated

Priority: 100

(
   {Lookup2.majorType == reference, Lookup2.minorType == ref_term}
   ({Token.category == NNP, Token.orth == upperInitial})
    ({Token.category == NNP, Token.orth == upperInitial})?
     ({Token.category == NNP, Token.orth == upperInitial})?
    (({Token.category == NNP, Token.orth == upperInitial,Token.string ==~ ".*-$"})
    ({Token.category == NNP, Token.orth == upperInitial})):a
    ({Date_of_Birth})
    
   
):match
-->
:match.Pt_Surname = {rule = Surname9, surname = :a@string}
